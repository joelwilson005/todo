openapi: 3.0.0
info:
  version: '1.0'
  title: Todo Application API
  description: 'API for a simple todo application.'
paths:
  /users:
    description: Represents user entities that act with the service.
  /users/login:
    post:
      description: Endpoint where login credentials are sent.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: johnsmith123
                password:
                  type: string
                  format: password
                  example: &88jfj-fnfb!-
      responses:
        200:
          description: User successfully logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userEntityWithToken'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        404:
          description: Entity does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
  /users/register:
    description: User sign up.
    post:
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userForm'
      responses:
        201:
          description: User successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userEntityWithToken'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        404:
          description: Entity does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        schema:
          type: integer
          example: 123456789
        required: true
    get:
      description: Obtain single user entity from the provided ID.
      tags:
        - users
      security:
        - jwt: [ ]

      responses:
        200:
          description: User entity has been successfully retrieved from server using the ID provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userEntity'
        404:
          description: Requested entity could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
    put:
      description: Update user entity.
      tags:
        - users
      security:
        - jwt: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserForm'
      responses:
        200:
          description: user entity has been successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userEntity'
        400:
          description: User entity was not updated to error on client's end.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        404:
          description: Unable to locate user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
    delete:
      description: Set user status to 'DELETED'. Account will be deleted 14 days after being set to this status.
      tags:
        - users
      security:
        - jwt: [ ]
      responses:
        200:
          description: User entity was successfully deleted
        404:
          description: Entity does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
  /users{userId}/todos:
    parameters:
      - in: path
        name: userId
        schema:
          type: integer
          example: 123456789
        required: true
    post:
      description: Create a new todo list.
      tags:
        - todos
      security:
        - jwt: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/todoListForm'
      responses:
        201:
          description: Todo list has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/todoListExpanded'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        404:
          description: Entity does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
    get:
      description: Get the list of todo lists that a user has.
      tags:
        - todos
      security:
        - jwt: [ ]
      parameters:
        - in: query
          name: size
          schema:
            type: integer
            example: 5
        - in: query
          name: page
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: TodoLists have been returned successfully.
          content:
            application/json:
              schema:
                properties:
                  currentPage:
                    type: integer
                    example: 3
                  hasNextPage:
                    type: boolean
                    example: true
                  previousPage:
                    type: boolean
                    example: true
                  totalNumberOfItems:
                    type: integer
                    example: 124
                  totalNumberOfPages:
                    type: integer
                    example: 25
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/todoListCondensed'
        400:
          description: Entity does not exist.
  /users/{userId}/todos/{todoId}:
    parameters:
      - in: path
        name: userId
        schema:
          type: integer
          example: 123456789

        required: true
      - in: path
        name: todo
        schema:
          type: integer
          example: 123456789
        required: true
    get:
      description: Get single todo list.
      tags:
        - todos
      security:
        - jwt: [ ]
      responses:
        200:
          description: TodoList successfully returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/todoListExpanded'
        404:
          description: TodoList could not be found.
    put:
      description: Update todo list.
      tags:
        - todos
      security:
        - jwt: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/todoListCondensed'
      responses:
        200:
          description: TodoList successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/todoListExpanded'
        400:
          description: Bad request.
        404:
          description: Entity does not exist.
    delete:
      description: Delete a todo list.
      tags:
        - todos
      security:
        - jwt: [ ]
      responses:
        200:
          description: TodoList successfully deleted.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        404:
          description: Entity does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'

  /users/{userId}/todos/{todoId}/actions:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: integer
          example: 123456789
      - in: path
        name: todoId
        required: true
        schema:
          type: integer
          example: 123456789
    get:
      description: Get the list of actions that are in a todo list.
      tags:
        - actions
      security:
        - jwt: [ ]
      responses:
        200:
          description: List of actions belonging to TodoList successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/action'
        204:
          description: Action list is empty.
        404:
          description: List of actions could not be found.
    post:
      description: Add an action to a todo list.
      tags:
        - actions
      security:
        - jwt: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                textDescription:
                  type: string
                  example: Go to the store.
      responses:
        201:
          description: Action successfully added to TodoList
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/action'
        400:
          description: Bad request.
        404:
          description: Entity does not exist.
  /users/{userId}/todos/{todoId}/actions/{actionId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: integer
          example: 123456789
      - in: path
        name: todoId
        required: true
        schema:
          type: integer
          example: 123456789
      - in: path
        name: actionId
        required: true
        schema:
          type: integer
          example: 123456789
    get:
      description: Get a todo list action.
      tags:
        - actions
      responses:
        200:
          description: Action entity successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/action'
        404:
          description: Entity does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
    put:
      description: Update a todo list action.
      tags:
        - actions
      security:
        - jwt: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/action'
      responses:
        200:
          description: Action entity successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/action'
        400:
          description: Action not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        404:
          description: Entity does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
    delete:
      description: Delete a todo list action.
      tags:
        - actions
      security:
        - jwt: [ ]
      responses:
        200:
          description: Action successfully deleted.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        404:
          description: Entity does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        401:
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
  /forgot:
    post:
      description: Endpoint where users send their email address to when they forget their password.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                emailAddress:
                  type: string
                  format: email
                  example: johnsmith@example.com
      responses:
        200:
          description: 6 digit password reset token sent to user's email address
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        404:
          description: Entity does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
  /reset_password:
    post:
      description: When user successfully obtains password reset verification code, they submit the code, email address and new password.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                emailAddress:
                  type: string
                  format: email
                  example:
                token:
                  type: integer
                  example: 123456
                password:
                  type: string
                  format: password
                  example: &88jfj-fnfb!-
      responses:
        200:
          description: Password successfully reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userEntityWithToken'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
        404:
          description: Entity does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiErrorMessage'
components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    userEntityWithToken:
      type: object
      properties:
        userId:
          type: integer
          example: 5446554
        username:
          type: string
          example: johnsmith123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        emailAddress:
          type: string
          format: email
          example: johnsmith@example.com
        dateOfBirth:
          type: string
          format: date
          example: 1990-01-01T00:00:00.000+00:00"
        timeCreated:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        accountStatus:
          type: string
          enum:
            - ACTIVE
            - DEACTIVATED
            - SUSPENDED
          default: ACTIVE
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    userForm:
      type: object
      properties:
        username:
          type: string
          example: johnsmith123
        emailAddress:
          type: string
          format: email
          example: johnsmith@example.com
        password:
          type: string
          format: password
          example: &88jfj-fnfb!-
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
    userEntity:
      type: object
      properties:
        userId:
          type: string
          example: 5446554
        emailAddress:
          type: string
          format: email
          example: johnsmith@example.com
        username:
          type: string
          example: johnsmith123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        dateOfBirth:
          type: string
          format: date
          example: 1990-01-01T00:00:00.000+00:00"
        timeCreated:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        accountStatus:
          type: string
          enum:
            - ACTIVE
            - DEACTIVATED
            - SUSPENDED
          default: ACTIVE
    todoListForm:
      type: object
      properties:
        title:
          type: string
          example: Weekend
        description:
          type: string
          example: Activities that must be completed this weekend.
        userId:
          type: integer
          example: 123456789
      required:
        - title
    todoListCondensed:
      type: object
      properties:
        id:
          type: integer
          example: 123456789
        title:
          type: string
          example: Weekend
        description:
          type: string
          example: A list of things I have to get done this weekend.
        dueDate:
          type: string
          format: date-time
          example: '2023-07-05T17:32:28Z'
        createdAt:
          type: string
          format: date-time
          example: '2023-07-05T17:32:28Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-07-05T17:32:28Z'
    todoListExpanded:
      type: object
      properties:
        id:
          type: integer
          example: 123456789
        title:
          type: string
          example: Weekend
        description:
          type: string
          example: A list of things I have to get done this weekend.
        dueDate:
          type: string
          format: date-time
          example: '2023-07-05T17:32:28Z'
        createdAt:
          type: string
          format: date-time
          example: '2023-07-05T17:32:28Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-07-05T17:32:28Z'
        completed:
          type: boolean
          default: false
          example: false
        actionList:
          type: array
          maxItems: 30
          items:
            $ref: '#/components/schemas/action'
    action:
      type: object
      properties:
        id:
          type: integer
          example: 123456789
        textDescription:
          type: string
          example: Buy groceries
        completed:
          type: boolean
          default: false
          example: false
        addedAt:
          type: string
          format: date-time
          example: '2023-07-05T17:32:28Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-07-05T17:32:28Z'
    apiErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: An error has occurred.
        timestamp:
          type: string
          format: date-time
          example: '2023-07-05T17:32:28Z'
    updateUserForm:
      type: object
      properties:
        userId:
          type: integer
          description: "User ID"
          example: 123456789
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: "User's first name"
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: "User's last name"
          example: "Doe"
        emailAddress:
          type: string
          format: email
          minLength: 1
          description: "User's email address"
          example: "john.doe@example.com"
        username:
          type: string
          description: "User's username"
          example: "john_doe"
        password:
          type: string
          description: "User's password"
          example: "P@ssw0rd"
        dateOfBirth:
          type: string
          description: "User's date of birth"
          example: "1990-01-01"
        gender:
          type: string
          enum:
            - Male
            - Female
            - Other
          description: "User's gender"
          example: "Male"
      required:
        - userID